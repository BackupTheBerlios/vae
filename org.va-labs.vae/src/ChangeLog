05/09/2004 mojo_jojo
	Makes Vae and Vui as singletons:
	* Vae.java (Vae): The constructor is now private.
	(getVae): Added this method that returns the core vae instance. The 
	instance is created if needed.
	* Vui.java (Vui): The constructor is now private. It registers the vae core
	instance, and register itself to it.
	(getVui): Added this method that returns the core vui intance. The instance
	is created if needed.
	(registerConfigurer): The IWorkbenchWindowConfigurer of the gui can be 
	registered through this new method.
	* RcpWorkbenchAdvisor (preWindowOpen): Does not instanciate a vae and a 
	vui but uses the static getVae and getVui methods instead. Registers the 
	window configurer inside the vui through registerConfigurer.
	Took out the reference to the vae core.
	
	Making the AntLoader and IAntParser as independant as possible:
	* AntLoader.java (open): This new method will take care of opening the
	build file. Moved from IAntParser.
	(close): This new method will take care of closing the build file. Moved
	from IAntParser.
	(AntLoader): Doesn't need any parameter anymore. It instanciate the parser
	itself, and get the vae user interface from the static method.
	(run): The project data is now transfered to the vae core, and not the 
	user interface.
	* VaeInitException.java: Created this exception to signal module 
	initialization troubles.
	* IAntParser.java (close): Took out this method as it is not specific 
	parsing job. Will be moved to the AntLoader.
	(open): Took out this method as it is not specific parsing job. 
	Will be moved to the AntLoader.
	(parse): Now the method takes as an argument the file to be parsed.
	* SaxAntParser.java (SaxAntParser): Does not register the vae instance
	anymore. All troubles will be signaled through exceptions.
	(close): Taken out to follow the new IAntParser interface.
	(open): Taken out to follow the new IAntParser interface.
	
	Enabling Vae to open build files:
	* Vae.java: The projects ArrayList becomes a HashMap to garantee that each
	build file will be loaded once and only once.
	(openProject): Implementation of the method. The method checks if the project
	has been previously opened before loading and parsing the build file.
	(Vae): Initiliaze the antLoader.
	(initAntLoader): This new methods handle the ant loader initialization. It is
	called from the constructor, but might be called later on by the exception 
	handler as well.
	(registerProject): This new method is used by the AntLoader to transfer 
	project data once the build file has been parsed.
	* Vui.java (registerTreeView): This new methods registers the DataTreeView
	for the vui.
	(displayProject): The method updates the input of the project tree.
	* DataTreeView.java (createPartControl): Took out the creation of a vae
	instance as it is done when the WorkbenchAdvisor initializes vae.
	(DataTreeView): Registers the view in the Vui so it can set the input of 
	the tree when needed.
	(setTreeInput): This new method enables to define the input for the project
	tree of the DataTreeView.
	
	* ImageHandler.java (getRegistry): Changed the test to avoid error messages
	if the resources directory is not found.
	
06/09/2004 mojo_jojo
	Enabling Vae to open build files - taking care of the DataInfoView:
	* Vae.java: Added a member currentProject to keep a track of the currently
	opened project.
	(registerProject): The method sets the project to be registered as the 
	current project.
	* Vui.java (registerInfoView): This new method is used to register the 
	DataInfoView to handle the change of input according to user clicks. It
	adds a ProjectTreeListener to the project tree.
	* DataInfoView.java: Formating of the code.
	(createPartControl): Reduced the size of each column.
	(DataInfoView): The constructor registers this view to the Vui.
	(getTableViewer): This new method is used by the ProjectTreeListener to get
	the tableViewer of the view.
	* ProjectTreeListener.java: Creation of this class as a change handler for
	the project tree. It links the project tree and the data table, and starts
	tree data edition if needed.
	* DataTreeView.java (addTreeListener): This methods adds a 
	ProjectTreeListener to the project tree.
	(getTree): This new method is used by the ProjectTreeListener to get the 
	tree of the view.
	* TreeTextListener.java: Creation of this class to listen text edition on 
	the project tree (roughly an import from the standalone version).
	
10/10/2004 mojo_jojo
	Connecting the tree view and the rest of the application:
	* IElementListener.java: This interface has to be implemented by each 
	entity that wants to be kept informed when the user changes the element he
	is interacting with.
	* Vui.java (elementListeners): This list will keep track of the listeners
	that wants to be kept informed of the changes of the current element.
	(addElementListener): Newly created, registers a listener that will be 
	kept informed of changes of the current element.
	(removeElementListener): Newly created, removes a listener from the list.
	(updateElementListeners): Newly created, informs all listeners of a change
	that occured.
	(setCurrentElement): Newly added method, sets the current considered 
	element.
	(Vui): initializes the list of elementListeners.
	* ProjectTreeListener.java (selectionChanged): Updates the current element
	monitored in the vui through the setCurrentElement method.
	* DataInfoView.java (setCurrentElement): Newly added method. DataInfoView 
	implements the IElementListener to update the content of the view according
	to the current element.
	(DataInfoView): Registers the view to the vui as an IElementListener.
	* DataTreeView.java (createPartControl): Instanciate a selection listener
	and connects it to the project tree so the selections are captured.
	
11/10/2004 mojo_jojo
	* DataTreeView.java (addTreeListener): Took out this method as the listener
	is directly added in the creatPartControl method.
	(getTree): Took out this method as it is not used for now. And I think another
	method should be used, so it will probably will never be used again.
	
22/12/2004 mojo_jojo
	Project Tree can handle more than one project:
	* SwtWorkspace.java: This new class implementing the ISwtElement interface 
	represents the workspace of the visual ant editor. It keeps track of
	the currently opened projects.
	* Vui.java (displayProject): Use the new Workspace class to display the
	informations in the projectTree.
	* SwtProject.java (SwtProject): Saves the Workspace that is the parent
	of the SwtProject.
	
	It's now impossible to open the same project more than once:
	* Vae.java (openProject): Checks if the project has been registered 
	previously before opening.
	
	* DataInfoView: Column names are taken from the Messages class.
	
	* SwtProject: Formated the source code.
	* ISwtElement: Formated the source code.