05/09/2004 mojo_jojo
	Makes Vae and Vui as singletons:
	* Vae.java (Vae): The constructor is now private.
	(getVae): Added this method that returns the core vae instance. The 
	instance is created if needed.
	* Vui.java (Vui): The constructor is now private. It registers the vae core
	instance, and register itself to it.
	(getVui): Added this method that returns the core vui intance. The instance
	is created if needed.
	(registerConfigurer): The IWorkbenchWindowConfigurer of the gui can be 
	registered through this new method.
	* RcpWorkbenchAdvisor (preWindowOpen): Does not instanciate a vae and a 
	vui but uses the static getVae and getVui methods instead. Registers the 
	window configurer inside the vui through registerConfigurer.
	Took out the reference to the vae core.
	
	Making the AntLoader and IAntParser as independant as possible:
	* AntLoader.java (open): This new method will take care of opening the
	build file. Moved from IAntParser.
	(close): This new method will take care of closing the build file. Moved
	from IAntParser.
	(AntLoader): Doesn't need any parameter anymore. It instanciate the parser
	itself, and get the vae user interface from the static method.
	(run): The project data is now transfered to the vae core, and not the 
	user interface.
	* VaeInitException.java: Created this exception to signal module 
	initialization troubles.
	* IAntParser.java (close): Took out this method as it is not specific 
	parsing job. Will be moved to the AntLoader.
	(open): Took out this method as it is not specific parsing job. 
	Will be moved to the AntLoader.
	(parse): Now the method takes as an argument the file to be parsed.
	* SaxAntParser.java (SaxAntParser): Does not register the vae instance
	anymore. All troubles will be signaled through exceptions.
	(close): Taken out to follow the new IAntParser interface.
	(open): Taken out to follow the new IAntParser interface.
	
	Enabling Vae to open build files:
	* Vae.java: The projects ArrayList becomes a HashMap to garantee that each
	build file will be loaded once and only once.
	(openProject): Implementation of the method. The method checks if the project
	has been previously opened before loading and parsing the build file.
	(Vae): Initiliaze the antLoader.
	(initAntLoader): This new methods handle the ant loader initialization. It is
	called from the constructor, but might be called later on by the exception 
	handler as well.
	(registerProject): This new method is used by the AntLoader to transfer 
	project data once the build file has been parsed.
	* Vui.java (registerTreeView): This new methods registers the DataTreeView
	for the vui.
	(displayProject): The method updates the input of the project tree.
	* DataTreeView.java (createPartControl): Took out the creation of a vae
	instance as it is done when the WorkbenchAdvisor initializes vae.
	(DataTreeView): Registers the view in the Vui so it can set the input of 
	the tree when needed.
	(setTreeInput): This new method enables to define the input for the project
	tree of the DataTreeView.
	
	* ImageHandler.java (getRegistry): Changed the test to avoid error messages
	if the resources directory is not found.
	
06/09/2004 mojo_jojo
	Enabling Vae to open build files - taking care of the DataInfoView:
	* Vae.java: Added a member currentProject to keep a track of the currently
	opened project.
	(registerProject): The method sets the project to be registered as the 
	current project.
	* Vui.java (registerInfoView): This new method is used to register the 
	DataInfoView to handle the change of input according to user clicks. It
	adds a ProjectTreeListener to the project tree.
	* DataInfoView.java: Formating of the code.
	(createPartControl): Reduced the size of each column.
	(DataInfoView): The constructor registers this view to the Vui.
	(getTableViewer): This new method is used by the ProjectTreeListener to get
	the tableViewer of the view.
	* ProjectTreeListener.java: Creation of this class as a change handler for
	the project tree. It links the project tree and the data table, and starts
	tree data edition if needed.
	* DataTreeView.java (addTreeListener): This methods adds a 
	ProjectTreeListener to the project tree.
	(getTree): This new method is used by the ProjectTreeListener to get the 
	tree of the view.
	* TreeTextListener.java: Creation of this class to listen text edition on 
	the project tree (roughly an import from the standalone version).
	
10/10/2004 mojo_jojo
	Connecting the tree view and the rest of the application:
	* IElementListener.java: This interface has to be implemented by each 
	entity that wants to be kept informed when the user changes the element he
	is interacting with.
	* Vui.java (elementListeners): This list will keep track of the listeners
	that wants to be kept informed of the changes of the current element.
	(addElementListener): Newly created, registers a listener that will be 
	kept informed of changes of the current element.
	(removeElementListener): Newly created, removes a listener from the list.
	(updateElementListeners): Newly created, informs all listeners of a change
	that occured.
	(setCurrentElement): Newly added method, sets the current considered 
	element.
	(Vui): initializes the list of elementListeners.
	* ProjectTreeListener.java (selectionChanged): Updates the current element
	monitored in the vui through the setCurrentElement method.
	* DataInfoView.java (setCurrentElement): Newly added method. DataInfoView 
	implements the IElementListener to update the content of the view according
	to the current element.
	(DataInfoView): Registers the view to the vui as an IElementListener.
	* DataTreeView.java (createPartControl): Instanciate a selection listener
	and connects it to the project tree so the selections are captured.
	
11/10/2004 mojo_jojo
	* DataTreeView.java (addTreeListener): Took out this method as the listener
	is directly added in the creatPartControl method.
	(getTree): Took out this method as it is not used for now. And I think another
	method should be used, so it will probably will never be used again.
	
22/12/2004 mojo_jojo
	Project Tree can handle more than one project:
	* SwtWorkspace.java: This new class implementing the ISwtElement interface 
	represents the workspace of the visual ant editor. It keeps track of
	the currently opened projects.
	* Vui.java (displayProject): Use the new Workspace class to display the
	informations in the projectTree.
	* SwtProject.java (SwtProject): Saves the Workspace that is the parent
	of the SwtProject.
	
	It's now impossible to open the same project more than once:
	* Vae.java (openProject): Checks if the project has been registered 
	previously before opening.
	
	* DataInfoView: Column names are taken from the Messages class.
	
	* SwtProject: Formated the source code.
	* ISwtElement: Formated the source code.
	
09/02/2005 mojo_jojo
	Upgrading the data table to be swt compliant and fix of the cell 
	edition (continued):
	* DataInfoView.java (createPartControl): Update of the code to set things
	the way it is supposed to be set in swt.
	
	Establishing a context menu associated to the information table 
	(continued):
	* EditAction.java: Added this class to handle the edition of an entry.
	
	Source code reformating :
	* DataTableContentProvider.java: Reformated the source code.
	* DataInfoView.java: Reformated the source code.
	* DataCellModifier.java: Reformated the source code.
	* Project.java: Reformated the source code.
	
12/02/2005 mojo_jojo
	Fixing the cell edition (continued):
	* DataInfoView.java (createPartControl): Sets the DataCellModifier for the
	information table.

15/02/2005 mojo_jojo
	Fixing the cell edition (end):
	* DataCellModifier.java (modify): Fixed null reference to project variable.
	Took out the project variable.
	
17/02/2005 mojo_jojo
	Connecting the changes on the data table with the internal 
	data (continued):
	* Vae.java (getCurrentProject): new method to get the current project.
	* Tag.java (setClean): sets the current project status in addition to the
	tag status.
	
	Adding a way to set the current project:
	* Vae.java (setCurrentProject): new method to set the current project.
	
	Implementation of the quit command:
	* Vui.java (quit): implementation of the function.
	
	* ExitAction.java: Reformatting of the source code.
	
18/02/2005 mojo_jojo
	Connecting the changes on the data table with the internal data (end):
	* Tag.java (setCurrentProject): new method to set the current project for
	the tag.
	* SaxAntParser.java (startElement): sets the current project of each newly
	created tag.
	
	* Vui.java (getActiveProject): Implemented the method.
	
	Cosmetic changes:
	* Vae.java (isDirty): became hasDirty.
	(VAE__DEBUG): This is used to make some printouts only in debug mode.
	(acknowledgeError): prints additional information to the console if the 
	VAE__DEBUG flag is on.
	(acknowledgeWarning): prints additional information to the console if the
	VAE__DEBUG flag is on.
	
22/02/2005 mojo_jojo
	Changing the name of the project if it has been edited:
	* ProjectTreeLabelProvider.java (getText): Updated the method so it returns
	an extra '*' to the project name if it is edited.
	* DataCellModifier.java (modify): Asks for a refresh of all items relative
	to the modified tag.
	* Vui.java (refresh): New method used to refresh all items relative to a
	motivated TagAttribute.
	* DataInfoView.java (refresh): New method that refreshes an edited 
	TagAttribute in the data table.
	* DataTreeView.java (DataTreeView): Keeps a reference to the used 
	SelectionChangedListener to deactivate it before a refresh (apparently a 
	bug in SWT).
	(refreshWorkspace): New method that refreshes the workspace used to 
	display the various projects.
	* SwtProject.java (getClean): New method returning the status of the 
	project.
	
23/02/2005 mojo_jojo
	* OpenAction.java (run): Fixed the method so it doesn't try to open a file
	when the user presses on cancel.
	
	* Vui.java (setCurrentElement): Took out debug statements.
	* ProjectTreeLabelProvider.java (getText): Took out debug statements.
	* DataCellModifier.java (modify): Calls the handle method of the 
	ExceptionHandler.
	
	* Vae.java (quit): Doesn't quit when the user cancels the action of quitting.
	(getVae): Renamed as getInstance.
	
	Enhancing global architecture (continued):
	* Vae.java (registerVui) : The vui is now created in  the Vae constructor.
	(Vae) : Constructs the user interface and passes it to the 
	ExceptionHandler.
	(getVui) : New method that returns the current user interface.
	* Vui.java (getVui): Renamed as getInstance.
	* RcpWorkbenchAdvisor.java (preWindowOpen): Changed the function to use the
	new architecture. Took out the coolbar as it is not used for now.
	* DataInfoView.java (DataInfoView): Uses the new Vui.getInstance() method
	to get a reference to the user interface.
	* DataTreeView.java (DataTreeView): Uses the new Vui.getInstance() method
	to get a reference to the user interface.
	* ProjectTreeListener.java (ProjectTreeListener): Uses the new 
	Vui.getInstance() method to get a reference to the user interface.
	* ExceptionHandler.java: Gets the vae instance that is used to handle the
	exceptions through Vae.getInstance(), at each use of a method (not saved as
	a reference).
	
	Enhancing exception handling (part 1):
	* IllegalAttributeException.java (IllegalAttributeException): Added the 
	list of legal attributes to the reason message.
	
24/02/2005 mojo_jojo
	Enhancing global architecture (end):
	* Vui.java (getToSave): Get the vae instance in use through 
	Vae.getInstance().
	(openProject): Get the vae instance in use through Vae.getInstance().
	(quit): Get the vae instance in use through Vae.getInstance().
	(registerVae): This function is not used anymore.
	AntLoader.java (AntLoader): gets the parser at runtime from the Vae 
	instance.
	(run): Gets the parser and the current Vae instance at runtime.
	(setCurrentParser): Not used anymore.
	* Vae.java (initAntLoader): Updated to use the new achitecture.
	* DataCellModifier.java (modify): Obtains the user interface through 
	the vae instance.
	
25/02/2005 mojo_jojo
	Enhancing exception handling (part2):
	* Vae.java (getExceptionHandler): New method that returns the 
	exceptionHandler for the Vae instance.
	* DataCellModifier (modify): Gets the exceptionHandler from Vae to
	handle exceptions in case they occur.
	* ExceptionHandler (handle): Surcharged one more time to handle 
	IllegalAttributeExceptions.
	* VaeException.java: Made all class variables protected.
	* NoSuchAttributeException.java : Formated the source code, took out the 
	todo.
	* Tag.java: Formated the source code. 
	(Tag): gets the vae instance that is used to get the current project using
	Vae.getInstance().
	
	* SimpleProject.java: Formated the source code.

26/02/2005 mojo_jojo
	Adding additional exception mechanism:
	* Vae.java (acknowledgeVaeException): New method that uses all the 
	attributes of a VaeException to make the user acknowledge the information.
	
	Improve the image handling in Vae:
	* Messages.properties: Added the Resource_Dir entry.
	* ImageHandler.java: Formated the source code.
	(getRegistery): Indicates to the user if it couldn't load image ressources.
	Uses the Resource_Dir entry of the messages.properties to identify the 
	resource directory.
	(addToRegistery): Uses the Resource_Dir entry of the messages.properties to
	identify the resource directory. Fixed the url creation.
	* ProjectTreeLabelProvider: Formated the source code.

27/02/2005 mojo_jojo
	* ImageHandler.java (addToRegistry): Added a '/' to the Ressource dir so
	even without a trailing / in the Resource_Dir entry in the 
	messages.properties file it would still work.
	* ProjectTreeLabelProvider: Took out some debug statements.
	
03/03/2005 mojo_jojo
	Finishing the xml parser:
	* Tag.java (setCharacters): New method to set the string between the 
	opening and closing tag represented by the instance.
	(getCharacters): New method to get the string between the opening and 
	closing tag represented by the instance.
	* SaxAntParser.java (characters): This method is called when there is text
	between opening and closing tags in the xml file.
	(endElement): Updates the Tag instance data regarding characters between
	tags if necessary.
	(toXml): Updated the method to take into account tags where there is text
	in between.
	
05/03/2005 mojo_jojo
	Architecture review, vae has to be independant of swt:
	* Vae.java (initAntLoader): Took out this method, all the work is now done
	in the constructor.
	(Vae): creates the parser that will be used by the AntLoader.
	* Vui.java (vui): creates the AntLoader.
	(loadBuild): New method to load the current build file through the AntLoader.
	(setBuildFile): New method to set the current build file in the AntLoader.
	* AntLoader.java (AntLoader): Doesn't throw VaeInitExceptions anymore as 
	the constructor is now empty.
	
	First skeleton of the VaeExport class:
	* Vae.java (Vae): we initialize the reference to the VaeExport instance.
	* VaeExport.java (getInstance): New method to get the VaeExport singleton.
	(VaeExport): Nothing to be done in this for now.
	
06/03/2005 mojo_jojo
	Prepare the Save feature and implement the Save as... feature:
	* Project.java (getFilePath): New method to get the path to the build file
	of the project.
	(setFilePath): New method to set the path to the build file of the project.
	* VaeExport.java (toFile): Implementation of the method.
	* Vae.java (saveCurrentProject): New method to save the current project.
	(saveAsProject): New method to save a project to a given path.
	(saveProjects): Implementation of this method using saveProject.
	* SaveAsAction.java (SaveAsAction): Took out the reference to the vui.
	(run): Gets the vae instance through Vae.getInstance().
	* RcpWorkbenchAdvisor.java (fillFileMenu): Updated to match the new SaveAsAction 
	constructor.
	* SaxAntParser.java (characters): Fixed the function (learn how to read the
	doc mojo!).
	* Tag.java (appendCharacters): New method used by the SaxAntParser to 
	append the characters to each tag during the parsing.
	(toXml): Fixed, and improve text layout.
	* Vui.java (saveProject): Method removed as it's a core feature.
	
	* AntLoader.java: Formated the source code.
	* OpenAction.java: Formated the source code.
	* SimpleProject.java: Formated the source code, made description as a legal
	attribute of a project.
	* ProjectTreeContentProvider.java: Formated teh source code. Took out debug
	statements.